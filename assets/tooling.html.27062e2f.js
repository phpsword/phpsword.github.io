import{_ as t,r as o,o as i,c,a as n,b as a,d as s,e as p}from"./app.aeb0c78e.js";const l="/assets/wordpress-redis.1f2d5879.jpg",r={},d=n("h1",{id:"tooling",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tooling","aria-hidden":"true"},"#"),s(" Tooling")],-1),u=n("p",null,"Sword comes with some tooling to help you manage the development environment.",-1),m=n("h2",{id:"php-image",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-image","aria-hidden":"true"},"#"),s(" PHP image")],-1),h=s("Assuming you've installed Sword using Docker, you'll get "),k={href:"https://github.com/phpsword/docker-images",target:"_blank",rel:"noopener noreferrer"},v=s("PHP images"),g=s(" ready for development and production that's also tailored for Symfony and WordPress."),b=n("p",null,"The PHP extensions are the same as the one used by the official WordPress image, with the addition of the Redis extension compiled with igbinary (used for faster PHP serialization).",-1),y=n("div",{class:"custom-container warning"},[n("p",{class:"custom-container-title"},"MACOS USERS"),n("p",null,"Arm64 builds (Apple M1/M2 chips) have redis and igbinary active but not working together due to compatibility issues while compiling.")],-1),_=s("These images are based on "),f={href:"https://github.com/williarin/docker-images",target:"_blank",rel:"noopener noreferrer"},w=s("williarin/docker-images"),S=s(" which are automatically built every week with the latest Alpine Linux, PHP and extensions versions."),P=p(`<h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h2><p>To activate redis in WordPress, the first step is to modify your <code>docker-compose.yml</code> file like this:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
    <span class="token key atrule">php</span><span class="token punctuation">:</span>
        <span class="token comment"># ...</span>
        <span class="token key atrule">environment</span><span class="token punctuation">:</span>
            <span class="token comment"># ...</span>
            <span class="token key atrule">WORDPRESS_REDIS_HOST</span><span class="token punctuation">:</span> redis
            <span class="token key atrule">WORDPRESS_REDIS_PASSWORD</span><span class="token punctuation">:</span> ChangeMe
            <span class="token key atrule">WORDPRESS_CACHE_KEY_SALT</span><span class="token punctuation">:</span> ChangeMe
        <span class="token comment"># ...</span>

    <span class="token comment"># ...</span>
    <span class="token key atrule">redis</span><span class="token punctuation">:</span>
        <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>alpine
        <span class="token key atrule">restart</span><span class="token punctuation">:</span> <span class="token string">&#39;no&#39;</span>
        <span class="token key atrule">command</span><span class="token punctuation">:</span> /bin/sh <span class="token punctuation">-</span>c &#39;redis<span class="token punctuation">-</span>server <span class="token punctuation">-</span><span class="token punctuation">-</span>appendonly yes <span class="token punctuation">-</span><span class="token punctuation">-</span>requirepass $$<span class="token punctuation">{</span>REDIS_PASSWORD<span class="token punctuation">}</span>&#39;
        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> redis_data<span class="token punctuation">:</span>/data
        <span class="token key atrule">environment</span><span class="token punctuation">:</span>
            <span class="token key atrule">REDIS_PASSWORD</span><span class="token punctuation">:</span> ChangeMe

<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">redis_data</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then run:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> up
</code></pre></div><p>This will download and reconfigure WordPress to connect to Redis.</p><p>Finally, you need the Redis plugin on WordPress, which can be downloaded and configured with these commands:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># Download the plugin using Composer</span>
<span class="token function">composer</span> require wpackagist-plugin/redis-cache
<span class="token comment"># Import the drop-in into our wp/content/ directory</span>
<span class="token function">cp</span> wp/content/plugins/redis-cache/includes/object-cache.php wp/content/
<span class="token comment"># Run WP-CLI command to activate the plugin</span>
<span class="token function">docker</span> compose <span class="token builtin class-name">exec</span> <span class="token parameter variable">-u</span> <span class="token number">82</span>:82 php bin/console wp plugin activate redis-cache
</code></pre></div><p>That&#39;s it. If you go to the Redis plugin options in Settings\u2794Redis, you should see that the connection is active.</p><p><img src="`+l+`" alt="Redis connection"></p><h2 id="wp-cli" tabindex="-1"><a class="header-anchor" href="#wp-cli" aria-hidden="true">#</a> WP-CLI</h2><p>WP-CLI is runnable through Symfony as a console command. This is how you run the <code>wp</code> command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">docker</span> compose <span class="token builtin class-name">exec</span> <span class="token parameter variable">-u</span> <span class="token number">82</span>:82 php bin/console wp
</code></pre></div><p>You don&#39;t need to specify <code>--path</code> as it&#39;s automatically set by the command.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>When running WP-CLI commands, it&#39;s recommanded to run them using the www-data user, which is 82 on Alpine Linux.</p><p>For simplicity, you can create an alias in your <code>~/.bashrc</code> file:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">alias</span> <span class="token assign-left variable">wp</span><span class="token operator">=</span><span class="token string">&#39;docker compose exec -u 82:82 php bin/console wp&#39;</span>
</code></pre></div></div><h2 id="production" tabindex="-1"><a class="header-anchor" href="#production" aria-hidden="true">#</a> Production</h2><p>To build for production, use the <code>docker-compose.prod.yml</code> in your CI. This will embed your source files in the production PHP image and give you a staging image that you can test on your staging server.</p><p>Moreover, if you&#39;re using Docker Swarm or Kubernetes with secrets, you can simply append <code>_FILE</code> to all the environment variables. As an example:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
    <span class="token key atrule">php</span><span class="token punctuation">:</span>
        <span class="token comment"># ...</span>
        <span class="token key atrule">environment</span><span class="token punctuation">:</span>
            <span class="token comment"># ...</span>
            <span class="token key atrule">WORDPRESS_DB_PASSWORD_FILE</span><span class="token punctuation">:</span> /run/secrets/myproject<span class="token punctuation">-</span>db<span class="token punctuation">-</span>password
            <span class="token key atrule">WORDPRESS_AUTH_KEY_FILE</span><span class="token punctuation">:</span> /run/secrets/myproject<span class="token punctuation">-</span>auth<span class="token punctuation">-</span>key
            <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function R(x,E){const e=o("ExternalLinkIcon");return i(),c("div",null,[d,u,m,n("p",null,[h,n("a",k,[v,a(e)]),g]),b,y,n("p",null,[_,n("a",f,[w,a(e)]),S]),P])}const D=t(r,[["render",R],["__file","tooling.html.vue"]]);export{D as default};
