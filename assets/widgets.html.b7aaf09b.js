import{_ as n,o as s,c as a,e}from"./app.b8cc807a.js";const t="/images/wordpress-widget.jpg",i={},p=e(`<h1 id="widgets" tabindex="-1"><a class="header-anchor" href="#widgets" aria-hidden="true">#</a> Widgets</h1><p>Widgets are a bit different, as they can&#39;t be services. They inherit <code>WP_Widget</code> class and are instantiated by WordPress.</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>To let Sword understand where to load widgets, we need to configure them. Open <code>/config/packages/sword.yaml</code> file and add:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">sword</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">widgets_namespace</span><span class="token punctuation">:</span> &#39;App\\Wordpress\\Widget\\&#39;
    <span class="token key atrule">widgets_path</span><span class="token punctuation">:</span> <span class="token string">&#39;%kernel.project_dir%/src/Wordpress/Widget/&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>By default, the namespace is <code>App\\\\Widget\\\\</code> and path <code>%kernel.project_dir%/src/Widget/</code>. You don&#39;t have to configure it if you like it this way.</p></div><h2 id="create-a-widget" tabindex="-1"><a class="header-anchor" href="#create-a-widget" aria-hidden="true">#</a> Create a widget</h2><p>Now create your first widget in <code>src/Wordpress/Widget/MyWidget.php</code> and fill it with this content:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Wordpress<span class="token punctuation">\\</span>Widget</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">WP_Widget</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyWidget</span> <span class="token keyword">extends</span> <span class="token class-name">WP_Widget</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span>
            <span class="token string single-quoted-string">&#39;my_widget&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;My Widget&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;description&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;This is my new widget&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;mychildtheme&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">widget</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$instance</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">form</span><span class="token punctuation">(</span><span class="token variable">$instance</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token variable">$newInstance</span><span class="token punctuation">,</span> <span class="token variable">$oldInstance</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">// ...</span>

        <span class="token keyword">return</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You don&#39;t need to register the widget using <code>register_widget()</code> nor call <code>widgets_init</code> action. This is automatically done for you, as long as your widgets live in the namespace you configured. You can also create sub-namespaced widgets and they&#39;ll be loaded as well.</p></div><h2 id="dependency-injection" tabindex="-1"><a class="header-anchor" href="#dependency-injection" aria-hidden="true">#</a> Dependency injection</h2><p>Widgets are instantiated while WordPress is loading, therefore you can&#39;t autowire services in the constructor.</p><p>This is where the helper functions <code>get_symfony_service()</code> and <code>get_symfony_parameter()</code> come into play.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// ...</span>

<span class="token keyword">use</span> <span class="token package">Twig<span class="token punctuation">\\</span>Environment</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">WP_Widget</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">Sword<span class="token punctuation">\\</span>SwordBundle<span class="token punctuation">\\</span>Helper<span class="token punctuation">\\</span>get_symfony_parameter</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token keyword">function</span> <span class="token package">Sword<span class="token punctuation">\\</span>SwordBundle<span class="token punctuation">\\</span>Helper<span class="token punctuation">\\</span>get_symfony_service</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyWidget</span> <span class="token keyword">extends</span> <span class="token class-name">WP_Widget</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name type-declaration">Environment</span> <span class="token variable">$twig</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$translationDomain</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">twig</span> <span class="token operator">=</span> <span class="token function">get_symfony_service</span><span class="token punctuation">(</span><span class="token class-name static-context">Environment</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">translationDomain</span> <span class="token operator">=</span> <span class="token function">get_symfony_parameter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sword.child_theme_translation_domain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span>
            <span class="token string single-quoted-string">&#39;my_widget&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;My Widget&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;description&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;This is my new widget&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">translationDomain</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">widget</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$instance</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">twig</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span>
            <span class="token string single-quoted-string">&#39;wordpress/widget/my_widget.html.twig&#39;</span><span class="token punctuation">,</span>
            <span class="token function">compact</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;args&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;instance&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then create a template in <code>/templates/wordpress/widget/my_widget.html.twig</code> and put this content:</p><div class="language-twig ext-twig line-numbers-mode"><pre class="language-twig"><code><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> args<span class="token punctuation">.</span>before_title<span class="token operator">|</span>raw <span class="token delimiter punctuation">}}</span></span>
    Hello from Twig
<span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> args<span class="token punctuation">.</span>after_title<span class="token operator">|</span>raw<span class="token delimiter punctuation">}}</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run this code, you&#39;ll get the following error:</p><p><code>The &quot;Twig\\Environment&quot; service or alias has been removed or inlined when the container was compiled.</code></p><p>The next step is to make this service public. To do so, simply add it to the list of the public services in <code>/config/packages/sword.yaml</code>:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">sword</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
    <span class="token key atrule">public_services</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Twig\\Environment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can add your widget to the sidebar and see the result.</p><p><img src="`+t+'" alt="WordPress widget"></p>',22),o=[p];function c(l,d){return s(),a("div",null,o)}const u=n(i,[["render",c],["__file","widgets.html.vue"]]);export{u as default};
