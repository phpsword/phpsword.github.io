import{_ as n,o as s,c as a,e}from"./app.b8cc807a.js";const t="/images/wordpress-sidebar.jpg",i={},p=e(`<h1 id="services" tabindex="-1"><a class="header-anchor" href="#services" aria-hidden="true">#</a> Services</h1><p>This section will introduce you to the <code>WordpressService</code> interface and its helper abstract class <code>AbstractWordpressService</code>.</p><p>All services that implement <code>WordpressService</code> interface will be automatically initialized by your theme&#39;s <code>functions.php</code>.</p><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>Create a file <code>/src/Wordpress/Sidebars.php</code>. This class will look something like this:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Wordpress</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Sword<span class="token punctuation">\\</span>SwordBundle<span class="token punctuation">\\</span>Service<span class="token punctuation">\\</span>AbstractWordpressService</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>DependencyInjection<span class="token punctuation">\\</span>Attribute<span class="token punctuation">\\</span>Autowire</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Sidebars</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractWordpressService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span>
        <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Autowire</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;%sword.child_theme_translation_domain%&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$translationDomain</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;widgets_init&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;registerSidebars&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">registerSidebars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token function">register_sidebar</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;My new sidebar&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">translationDomain</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;my-new-sidebar&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;before_widget&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&lt;aside id=&quot;%1$s&quot; class=&quot;widget %2$s&quot;&gt;&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;after_widget&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&lt;/aside&gt;&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;before_title&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&lt;span class=&quot;widget-title&quot;&gt;&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;after_title&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&lt;/span&gt;&lt;div class=&quot;is-divider small&quot;&gt;&lt;/div&gt;&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now when you navigate to <code>/wp-admin/widgets.php</code> you get your new sidebar:</p><p><img src="`+t+`" alt="WordPress sidebar"></p><h2 id="dependency-injection" tabindex="-1"><a class="header-anchor" href="#dependency-injection" aria-hidden="true">#</a> Dependency injection</h2><p>Classes implementing <code>WordpressService</code> can take advantage of Symfony&#39;s dependency injection.</p><div class="custom-container warning"><p class="custom-container-title">IMPORTANT</p><p>Symfony services are initialized <strong>before</strong> WordPress is loaded, therefore you can&#39;t use the constructor to call WordPress hooks. Instead, call them in the <code>initialize()</code> method, which is called while WordPress is loading, in your child theme&#39;s <code>functions.php</code>.</p></div><h2 id="priority" tabindex="-1"><a class="header-anchor" href="#priority" aria-hidden="true">#</a> Priority</h2><p><code>WordpressService</code> interface also allows you to define a loading priority.</p><p>To make a service to load with a high priority, implement <code>getPriority()</code> method:</p><div class="language-php ext-php"><pre class="language-php"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Sidebars</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractWordpressService</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The default priority used by <code>AbstractWordpressService</code> is <code>0</code>. Higher number means higher priority.</p></div>`,16),o=[p];function c(l,r){return s(),a("div",null,o)}const u=n(i,[["render",c],["__file","services.html.vue"]]);export{u as default};
